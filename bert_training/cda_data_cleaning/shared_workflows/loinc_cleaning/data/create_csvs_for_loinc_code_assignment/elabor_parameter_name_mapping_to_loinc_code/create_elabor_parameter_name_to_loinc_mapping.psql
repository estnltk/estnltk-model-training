DO $$
begin
raise notice 'Elabor parameter_name to loinc mapping:';
end;
$$;

set role :role;

drop table if exists :schema.elabor_parameter_name_to_loinc_mapping;
create table :schema.elabor_parameter_name_to_loinc_mapping
(
    parameter_name    varchar,
    t_lyhend          varchar,
    t_nimetus         varchar,
    kasutatav_nimetus varchar,
    loinc_code        varchar,
    substrate         varchar,
    evidence          varchar
);

reset role;

-- case where parameter_name = t_lyhend
insert into :schema.elabor_parameter_name_to_loinc_mapping(parameter_name, t_lyhend, t_nimetus,
                                                                    kasutatav_nimetus, loinc_code, substrate, evidence)
select t_lyhend, t_lyhend, t_nimetus, kasutatav_nimetus, loinc_no, system, 't_lyhend'
from classifications.elabor_analysis;

-- case where parameter_name = t_nimetus and t_nimetus is unique
insert into :schema.elabor_parameter_name_to_loinc_mapping(parameter_name, t_lyhend, t_nimetus,
                                                                    kasutatav_nimetus, loinc_code, substrate, evidence)
select t_nimetus, t_lyhend, t_nimetus, kasutatav_nimetus, loinc_no, system, 't_nimetus'
from classifications.elabor_analysis
where t_nimetus in (
    --list of uniquely mapped t_nimetus
    select t_nimetus
    from (
             select t_nimetus, array_agg(distinct t_lyhend) as t_lyhendid
             from classifications.elabor_analysis
             group by t_nimetus
         ) as c
    where array_length(c.t_lyhendid, 1) = 1
);


-- case where parameter_name = kasutatav_nimetus and kasutatav_nimetus is unique
insert into :schema.elabor_parameter_name_to_loinc_mapping(parameter_name, t_lyhend, t_nimetus,
                                                                    kasutatav_nimetus, loinc_code, substrate, evidence)
select kasutatav_nimetus, t_lyhend, t_nimetus, kasutatav_nimetus, loinc_no, system, 'kasutatav_nimetus'
from classifications.elabor_analysis
where kasutatav_nimetus in (
    --list of uniquely mapped kasutatav_nimetus
    select kasutatav_nimetus
    from (
             select kasutatav_nimetus, array_agg(distinct t_lyhend) as t_lyhendid
             from classifications.elabor_analysis
             group by kasutatav_nimetus
         ) as c
    where array_length(c.t_lyhendid, 1) = 1
);

-- case where parameter_name = t_lyhend + t_nimetus
insert into :schema.elabor_parameter_name_to_loinc_mapping(parameter_name, t_lyhend, t_nimetus,
                                                                    kasutatav_nimetus, loinc_code, substrate, evidence)
select t_lyhend || ' ' || t_nimetus, t_lyhend, t_nimetus, kasutatav_nimetus, loinc_no, system, 't_lyhend + t_nimetus'
from classifications.elabor_analysis;

-- Do not know, if some substrates belong to urine or blood
-- Therefore the CASE ... WHEN ... statement can be improved
-- Examples of unknown substrates
/*
Isolate,1154
CSF,365
PPP,203
Semen,141
Plr fld,131
Periton fld,130
Synv fld,113
Pericard fld,99
^Patient,95
Body fld,90
Bone mar,76
*/
update :schema.elabor_parameter_name_to_loinc_mapping
set substrate = case
                    when substrate in
                         ('Ser', 'Bld/Tiss', 'Bld.dot', 'RBC', 'Plas', 'BldA', 'BldC', 'BldMV', 'BldV', 'BldCo',
                          'BldCoV', 'BldCoA', 'Bld^newborn', 'Ser+Bld', 'BldA+Inhl gas', 'Bld/Bone mar', 'BldA+BldMV',
                          'Bld.pos growth', 'BldA+Resp.alv')
                        then 'Bld'
                    when substrate in ('Stool', 'Urine sed') then 'Urine'
                    when substrate in
                         ('Periton fld+Ser/Plas', 'Ser/Plas+Plr fld', 'Ser/Plas.maternal^fetus', 'Ser/Plas+Synv fld',
                          'Ser+Plas') then 'Ser/Plas'
                    when substrate in ('XXX','') then NULL
                    else substrate
    end,
    -- some loinc codes end with '.' in elabor, actually should not have the dot in the end
    loinc_code = regexp_replace(loinc_code, '\.', '') ;



--mapping kukkus 18 705lt -> 18123

set search_path to :schema;
\copy (select distinct on (parameter_name, t_lyhend, loinc_code, substrate) parameter_name, t_lyhend, t_nimetus, kasutatav_nimetus, loinc_code, substrate, evidence from elabor_parameter_name_to_loinc_mapping where loinc_code is not null) to 'create_csvs_for_loinc_code_assignment/results/elabor_parameter_name_to_loinc_mapping.csv' With (delimiter ',', format csv, header)


-- jooksutamine
-- psql --host=p12.stacc.ee --dbname=egcut_epi --file=elabor_parameter_name_mapping_to_loinc_code/create_elabor_parameter_name_to_loinc_mapping.psql -v role=egcut_epi_work_create -v schema=work 2>&1 | tee
