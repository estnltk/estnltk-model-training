SET ROLE {role};

-------------------------------------------------------------------------------
--MATCH NUM AND PAR (parentheses)
-------------------------------------------------------------------------------
--deals with numbers that contain parentheses

drop function if exists {schema}.match_num_and_par(text text);
create or replace function {schema}.match_num_and_par (text text)
    returns text
as
$body$
declare
    part0 text;
    part1 text;
    type_p0 text;
    type_p1 text;
    clean_p0 text;
    clean_p1 text;
begin
    --text := remove_units(text, FALSE);
    part0 := trim(both from split_part(text, '(', 1));
    part1 := trim(both from split_part(text, '(', 2));

    if length(part1) != 0 and part1 like '%)' then
        part1 := rtrim(part1,')');

        -- determines types (float or integer) of part0 and part1
        if match_integer(part0) then
            select 'integer', clean_integer(part0) into  type_p0, clean_p0;
        elseif match_float(part0) then
            select 'float',   clean_floats(part0) into  type_p0, clean_p0;
        end if;

        if match_integer(part1) then
            select 'integer', clean_integer(part1) into  type_p1, clean_p1;
        elseif match_float(part1) then
            select 'float',   clean_floats(part1) into  type_p1, clean_p1;
        end if;


        -- determines if part0 and part1 are the same
        if type_p0 = 'float' and type_p1 = 'float' then
            if clean_p0 = clean_p1 then
             return  clean_p0;
            end if;
        elseif type_p0 = 'float' and type_p1 = 'integer' then
            if clean_p0::float = clean_p1::float then
                return clean_p0;
            end if;

        elseif type_p0 = 'integer' and type_p1 = 'float' then
            if clean_p0::float = clean_p1::float then
                return clean_p1;
            end if;

        elseif type_p0 = 'integer' and type_p1 = 'integer' then
            if clean_p0 = clean_p1 then
                return clean_p0;
            end if;

        end if;
    end if;
    return False;
end
$body$
language plpgsql;

-------------------------------------------------------------------------------
--IS NUM AND PAR (parentheses) 
-------------------------------------------------------------------------------
drop function if exists {schema}.is_num_and_par(text text);
create or replace function {schema}.is_num_and_par (text text)
    returns boolean
as
$body$
declare
    is_par text;
begin
    is_par :=  match_num_and_par(text);
    -- paranthesis is a number
    if is_par ~ '^[0-9\.]+$' then return True; end if;
    return False;
end
$body$
language plpgsql;
