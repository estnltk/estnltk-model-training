SET ROLE {role};

create or replace function {schema}.clean_parameter_name(parameter_name text)
        returns text
as
$body$
declare
        parameter_name_clean text := parameter_name;
begin
        if parameter_name_clean = 'Parameetri nimetus' or parameter_name_clean = 'Paramteeri nimetus' or
           parameter_name_clean = 'NaN' or parameter_name_clean = ' ' then
           return null; end if;

        -- analysis names placed under parameter name
        if parameter_name = ANY ('{{U-Strip,B-A3Diff,B1-A3Diff,B-CBC,B-CBC+Diff,B-CBC-Diff,B-CBC-5Diff
                                    B1-CBC-5Diff,S-Crea,B-CBC-5DIFF-NRBC-RET,S-Bil,B-Smear-m,B-Hemogramm}}')
        then return NULL; end if;

        --removes repeating white spaces
        parameter_name_clean := trim(regexp_replace(parameter_name_clean, '\s+', ' ', 'g'));

        -- '(Ketoonid uriinis )' -> (Ketoonid uriinis)
        parameter_name_clean := regexp_replace(parameter_name_clean, '\s\)', ')');

        --a1 ALAT  ->	ALAT
        --a20 ASAT ->	ASAT
        --a139 Valk->	Valk
        --a2041 Hb ->	HB
        --a10177 A-gripi viiruse RNA -> A-gripi viiruse RNA
        if(parameter_name_clean ~ '^[a][0-9]{{5}}')
            then parameter_name_clean := regexp_replace(parameter_name_clean, '^[a][0-9]{{5}}','');end if;
        if(parameter_name_clean ~ '^[a][0-9]{{4}}')
            then parameter_name_clean := regexp_replace(parameter_name_clean, '^[a][0-9]{{4}}','');end if;
        if(parameter_name_clean ~ '^[a][0-9]{{3}}')
            then parameter_name_clean := regexp_replace(parameter_name_clean, '^[a][0-9]{{3}}','');end if;
        if(parameter_name_clean ~ '^[a][0-9]{{2}}')
            then parameter_name_clean := regexp_replace(parameter_name_clean, '^[a][0-9]{{2}}','');end if;
        if(parameter_name_clean ~ '^[a][0-9]{{1}}')
            then parameter_name_clean := regexp_replace(parameter_name_clean, '^[a][0-9]{{1}}','');end if;

        -- '-86 Tsütolüüs' -> ' Tsütolüüs'
        -- 'a2345-13 HPV DNA' -> a2345 is removed in previous step and now -13 is removed
        parameter_name_clean := regexp_replace(parameter_name_clean, '^-\d+','');

        --remove "HK:0000", "HK:1111" etc
        if(parameter_name_clean ~ 'HK:')
            then parameter_name_clean := regexp_replace(parameter_name_clean, '\s*HK:[0-9]{{4}}', '');end if;

        --Fibrinogeen plasmas* -> Fibrinogeen plasmas
        if(parameter_name_clean like '%*')
            then  parameter_name_clean = substr(parameter_name_clean, 1, length(parameter_name_clean) - 1);
        end if;

        -- Removing parentheses
        -- Works only for single pair of parentheses
        -- WBC(valgeverelible) -> WBC
        if(parameter_name_clean ~ '(.*)\((.*)\)') 
            then  parameter_name_clean = regexp_replace(parameter_name_clean, '\(.*?\)',''); end if;

        -- % and # from beginning to end
        -- %NEUT -> NEUT%
        -- #NEUT -> NEUT#
        if(parameter_name_clean LIKE '\%%') 
            then parameter_name_clean = substr(parameter_name_clean, 2, 8000) || '%';end if;
        if(parameter_name_clean LIKE '\#%') 
            then parameter_name_clean = substr(parameter_name_clean, 2, 8000) || '#';end if;

        -- replace ":" from the end
        parameter_name_clean := regexp_replace(parameter_name_clean, ':$','');

        --replacing multiple whitespaces with one
        parameter_name_clean = trim(regexp_replace(parameter_name_clean, '\s+', ' ', 'g'));

        return parameter_name_clean;
end
$body$
language plpgsql;
